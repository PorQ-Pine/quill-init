import { ProgressBar } from "../../ui-common/progressbar.slint";
import { Button } from "../../ui-common/button.slint";
import { IconButton } from "../../ui-common/iconbutton.slint";
import { Switch } from "../../ui-common/switch.slint";
import { ScrollView, TabWidget, TextEdit, LineEdit, CheckBox } from "std-widgets.slint";
import { MovingDots } from "../../ui-common/moving-dots.slint";
import { HLine } from "../../ui-common/hline.slint";
import { VLine } from "../../ui-common/vline.slint";
import { Dialog } from "../../ui-common/dialog.slint";
import { SectionButton } from "../../ui-common/sectionbutton.slint";
import { VirtualKeyboard, VirtualKeyboardHandler, KeyModel } from "../../ui-common/virtual_keyboard/virtual_keyboard.slint";

export enum Page { None, QuillBoot, VersionInfo, BootSplash, Options, BootConfiguration, RecoveryOptions, Error }
export enum QrCodePage { QrCode, NotAvailable }
export enum ProgressWidget { ProgressBar, MovingDots }
export enum DialogType { None, Toast, SoftReset, WifiUI, WifiLogs, WifiPassphrase }
export { VirtualKeyboardHandler, KeyModel }

export component AppWindow inherits Window {
    // Scaling
    in-out property <int> scaling_factor: 1;
    // Root properties
    default-font-family: "U001";
    default-font-size: 40px * scaling_factor;
    page: Page.None;
    // Callbacks
    callback power_off();
    callback reboot();
    callback toggle_ui_scale();
    callback toggle_persistent_rootfs();
    callback toggle_wifi();
    callback boot_default();
    callback soft_reset();
    callback get_networks();
    callback connect_to_wifi_network(string, string);
    // In-out properties
    in-out property <string> version_string;
    in-out property <string> short_version_string;
    in-out property <float> boot_progress;
    in-out property <Page> page;
    in-out property <QrCodePage> qr_code_page;
    in-out property <ProgressWidget> progress_widget;
    in-out property <DialogType> dialog;
    in-out property <string> dialog_message;
    in-out property <int> dialog_millis_count;
    in-out property <float> button_scaling_multiplier: 1;
    in-out property <bool> startup_finished: false;
    in-out property <string> error_reason;
    in-out property <string> program_output;
    in-out property <string> kernel_buffer;
    in-out property <image> debug_qr_code;
    in-out property <image> help_uri_qr_code;
    in-out property <int> debug_tab_index: 0;
    in-out property <string> section_header_title;
    in-out property <image> wifi_icon;
    // Configuration properties
    in-out property <bool> persistent_rootfs;
    // Run-time properties
    in property <bool> wifi_enabled;
    in property <bool> wifi_connected;
    in property <bool> wifi_scanning_lock;
    in property <bool> wifi_connecting_lock;
    in property <bool> wifi_enabling_lock;
    in property <bool> wifi_disabling_lock;
    in property <string> wifi_connected_name;
    in-out property <string> potential_wifi_network;
    in property <[string]> wifi_network_names;
    in property <[bool]> wifi_network_open_vec;
    // Generic multipliers for default-sized and smaller-sized items
    property <float> wmultiplier: 0.25;
    property <float> hmultiplier: 0.05;
    property <float> swmultiplier: 0.25;
    property <float> shmultiplier: 0.03;
    property <float> dialog_sizes_multiplier: 0.9;
    // Default sizes/radii/properties; there may be elements that don't enforce them for various reasons
    property <relative-font-size> header_font_size: 2rem;
    property <length> layout_padding: 30px;
    property <length> layout_spacing: 10px;
    property <length> button_width: root.width * wmultiplier * scaling_factor * button_scaling_multiplier;
    property <length> button_height: root.height * hmultiplier * scaling_factor * button_scaling_multiplier;
    property <length> icon_button_height: button_height * 0.5;
    property <length> section_button_height: button_height * 1.25;
    property <length> switch_width: button_width * 0.45;
    property <length> switch_height: button_height * 0.7;
    property <length> radius: 10px;
    property <length> logo_width: 0.45 * root.width;
    property <length> logo_height: logo_width;
    property <length> medium_logo_width: logo_width * 0.55;
    property <length> medium_logo_height: medium_logo_width;
    property <string> header_font_family: "Inter";
    property <string> console_font_family: "Roboto Mono";
    property <string> regular_font_family: root.default-font-family;
    property <length> console_header_font_size: 0.8 * self.default_font_size;
    property <length> console_body_font_size: 0.6 * self.default_font_size;
    property <length> tab_rectangle_border_width: 2px;
    property <color> tab_rectangle_border_color: darkgrey;
    property <length> dialog_rectangle_thickness: 6px;
    property <length> keyboard_key_height: 0.055 * root.height;

    // Main UI
    // Don't ask me why a ScrollView is needed here to prevent binding loops...
    ScrollView {
        VerticalLayout {
            padding: layout_padding;
            spacing: layout_spacing;
            if (page != Page.QuillBoot) && (page != Page.BootSplash) && (page != Page.None) && (page != Page.Error): HorizontalLayout {
                IconButton {
                    icon: @image-url("../../icons/arrow-back.svg");
                    border-radius: radius;
                    height: icon_button_height;
                    width: self.height;
                    /* This is needed to center this item vertically on the horizontal layout.
                        It would be great if Slint provided an option to do it automatically instead... */
                    y: (parent.height - self.height) / 2;
                    clicked => {
                        if root.page == Page.Options || root.page == Page.VersionInfo {
                            root.page = Page.QuillBoot;
                        } else if root.page == Page.RecoveryOptions || root.page == Page.BootConfiguration {
                            section_header_title = "Options";
                            root.page = Page.Options;
                        }
                    }
                }

                Rectangle { }

                Text {
                    text: section_header_title;
                    horizontal-alignment: center;
                    font-family: header_font_family;
                    font-weight: 800;
                    y: (parent.height - self.height) / 2;
                }

                Rectangle { }

                Rectangle {
                    height: icon_button_height;
                    width: self.height;
                }
            }
            if (page != Page.QuillBoot) && (page != Page.BootSplash) && (page != Page.None) && (page != Page.Error): HLine { }

            if (page == Page.QuillBoot): VerticalLayout {
                padding: layout_padding;
                Rectangle { }

                HorizontalLayout {
                    alignment: center;
                    Image {
                // Displaying the same image but with the SVG file gave terrible results, for some reason
                source: @image-url("../../branding/quill-banner.png");
                        width: 768px;
                        height: 330.5625px;
                    }
                }

                Rectangle { }

                HorizontalLayout {
                    Text {
                        text: "QuillBoot";
                        horizontal-alignment: center;
                        font-family: header_font_family;
                        font-size: header_font_size;
                        font-weight: 800;
                    }
                }

                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: "Diagnostics & Recovery";
                        font-size: 1rem;
                    }
                }

                Rectangle { }

                HorizontalLayout {
                    alignment: center;
                    spacing: layout_spacing * 4;
                    Button {
                        text: "Options";
                        width: button_width;
                        height: button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            section_header_title = "Options";
                            root.page = Page.Options;
                        }
                    }

                    Button {
                        text: "Quill OS";
                        width: button_width;
                        height: button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            root.page = Page.None;
                            root.boot_default();
                        }
                    }
                }

                Rectangle {
                    vertical-stretch: 0.17;
                }

                HorizontalLayout {
                    alignment: center;
                    Button {
                        text: "Power off";
                        width: button_width;
                        height: button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            root.power_off();
                        }
                    }
                }

                Rectangle { }

                HorizontalLayout {
                    Button {
                        text: "About";
                        width: button_width;
                        height: button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            section_header_title = "About";
                            root.page = Page.VersionInfo;
                        }
                    }

                    Rectangle { }

                    Text {
                        vertical-alignment: center;
                        font-family: regular_font_family;
                        text: "Scale GUI";
                    }

                    Rectangle {
                        horizontal-stretch: 0.05;
                    }

                    Switch {
                        y: (parent.height - self.height) / 2;
                        width: switch_width;
                        height: switch_height;
                        border-radius: radius;
                        activated: scaling_factor > 1 ? true : false;
                        toggled => {
                            root.toggle_ui_scale();
                        }
                    }

                    VLine {
                        left-padding-multiplier: 5.0;
                        right-padding-multiplier: self.left-padding-multiplier * 1 / 2;
                    }

                    IconButton {
                        icon: wifi_icon;
                        border-radius: radius;
                        height: button_height;
                        width: self.height;
                        padding-value: 15px;
                        y: (parent.height - self.height) / 2;
                        clicked => {
                            if dialog == DialogType.WifiUI {
                                dialog = DialogType.None;
                            } else {
                                dialog = DialogType.WifiUI;
                            }
                        }
                    }
                }
            }

            if (page == Page.BootSplash): VerticalLayout {
                padding-top: 550px;
                padding-bottom: self.padding-top;
                HorizontalLayout {
                    alignment: center;
                    Image {
                        width: logo_width;
                        height: logo_height;
                        source: @image-url("../../branding/quillos.svg");
                    }
                }

                Rectangle { }

                HorizontalLayout {
                    alignment: center;
                    if (progress_widget == ProgressWidget.ProgressBar): ProgressBar {
                        progress: root.boot_progress;
                        width: 37.5%;
                        height: 2%;
                    }
                    if (progress_widget == ProgressWidget.MovingDots): Rectangle {
                        width: 14%;
                        MovingDots {
                            ready: startup_finished;
                        }
                    }
                }
            }

            if (page == Page.VersionInfo): VerticalLayout {
                spacing: layout_spacing;
                Rectangle { }

                HorizontalLayout {
                    alignment: center;
                    Image {
                        source: @image-url("../../branding/quillos.svg");
                        width: root.width * 0.25;
                        height: self.width;
                    }
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }

                ScrollView {
                    height: 50%;
                    mouse-drag-pan-enabled: true;
                    VerticalLayout {
                        Text {
                            text: "Quill OS";
                            horizontal-alignment: center;
                            font-family: header_font_family;
                            font-size: header_font_size;
                            font-weight: 800;
                        }

                        Rectangle {
                            vertical-stretch: 0.1;
                        }

                        Text {
                            text: "Copyright © 2021-2025";
                            horizontal-alignment: center;
                            font-family: header_font_family;
                            font-weight: 800;
                        }

                        Text {
                            text: "Nicolas Mailloux\n<nicolecrivain@gmail.com>\nSzybet\n<https://github.com/Szybet>";
                            font-family: regular_font_family;
                            horizontal-alignment: center;
                        }

                        Rectangle {
                            vertical-stretch: 0.25;
                        }

                        Text {
                            text: "Software information";
                            horizontal-alignment: center;
                            font-family: header_font_family;
                            font-weight: 800;
                        }

                        Text {
                            text: root.version_string;
                            horizontal-alignment: center;
                            wrap: word-wrap;
                        }
                    }
                }

                Rectangle { }
            }

            if (page == Page.Options): ScrollView {
                mouse-drag-pan-enabled: true;
                VerticalLayout {
                    spacing: layout_spacing;
                    SectionButton {
                        text: "Recovery options";
                        height: section_button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            section_header_title = "Recovery options";
                            page = Page.RecoveryOptions;
                        }
                    }

                    SectionButton {
                        text: "Boot configuration";
                        height: section_button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            section_header_title = "Boot configuration";
                            page = Page.BootConfiguration;
                        }
                    }
                }

                Rectangle { }
            }

            if (page == Page.RecoveryOptions): VerticalLayout {
                ScrollView {
                    mouse-drag-pan-enabled: true;
                    VerticalLayout {
                        spacing: layout_spacing;
                        HorizontalLayout {
                            Rectangle {
                                Text {
                                    text: "Soft-reset this device";
                                    font-family: regular_font_family;
                                    vertical-alignment: center;
                                }
                            }

                            Rectangle { }

                            Button {
                                text: "Soft reset";
                                width: button_width;
                                height: button_height;
                                border-radius: radius;
                                font-family: header_font_family;
                                clicked => {
                                    dialog_message = "This will erase all of the user data on this device and reset settings to default, without reinstalling the firmware. Are you sure you want to continue?";
                                    dialog = DialogType.SoftReset;
                                }
                            }
                        }
                    }

                    Rectangle { }
                }
            }

            if (page == Page.BootConfiguration): VerticalLayout {
                ScrollView {
                    mouse-drag-pan-enabled: true;
                    VerticalLayout {
                        spacing: layout_spacing;
                        HorizontalLayout {
                            Rectangle {
                                Text {
                                    text: "Persistent root filesystem";
                                    font-family: regular_font_family;
                                    vertical-alignment: center;
                                }
                            }

                            Rectangle { }

                            Switch {
                                width: switch_width;
                                height: switch_height;
                                y: (parent.height - self.height) / 2;
                                border-radius: radius;
                                activated: persistent_rootfs;
                                toggled => {
                                    persistent_rootfs = !persistent_rootfs;
                                    toggle_persistent_rootfs();
                                }
                            }
                        }
                    }
                }
            }

            if (page == Page.Error): VerticalLayout {
                padding-left: layout_padding;
                padding-right: layout_padding;
                Rectangle {
                    vertical-stretch: 0.1;
                }

                HorizontalLayout {
                    alignment: center;
                    spacing: root.width * 0.04;
                    Image {
                        source: @image-url("../../icons/x-alert.svg");
                        width: medium_logo_width;
                        height: medium_logo_height;
                    }

                    Image {
                        source: help_uri_qr_code;
                        width: medium_logo_width;
                        height: medium_logo_height;
                    }
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }

                Text {
                    text: "Fatal error";
                    horizontal-alignment: center;
                    font-family: header_font_family;
                    font-size: header_font_size;
                    font-weight: 800;
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }

                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: error_reason;
                        horizontal-alignment: center;
                        wrap: word-wrap;
                        font-family: console_font_family;
                        font-size: console_header_font_size;
                        width: root.width * 0.7;
                    }
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }

                TabWidget {
                    current-index: debug_tab_index;
                    Tab {
                        title: "Debug QR code";
                        Rectangle {
                            border-width: tab_rectangle_border_width;
                            border-color: tab_rectangle_border_color;
                            VerticalLayout {
                                alignment: center;
                                if (qr_code_page == QrCodePage.QrCode): Image {
                                    source: debug_qr_code;
                                    height: 99%;
                                }
                                if (qr_code_page == QrCodePage.NotAvailable): Text {
                                    text: "(Not currently available)";
                                    font-family: regular_font_family;
                                    horizontal-alignment: center;
                                }
                            }
                        }
                    }

                    Tab {
                        title: "Program output";
                        Rectangle {
                            border-width: tab_rectangle_border_width;
                            border-color: tab_rectangle_border_color;
                            VerticalLayout {
                                ScrollView {
                                    mouse-drag-pan-enabled: true;
                                    // Scroll to bottom
                                    viewport-y: 0px - self.viewport-height + self.visible-height;
                                    VerticalLayout {
                                        Text {
                                            text: program_output;
                                            wrap: word-wrap;
                                            font-size: console_body_font_size;
                                            font-family: console_font_family;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Tab {
                        title: "Kernel log";
                        Rectangle {
                            border-width: tab_rectangle_border_width;
                            border-color: tab_rectangle_border_color;
                            VerticalLayout {
                                ScrollView {
                                    mouse-drag-pan-enabled: true;
                                    // Scroll to bottom
                                    viewport-y: 0px - self.viewport-height + self.visible-height;
                                    VerticalLayout {
                                        Text {
                                            text: kernel_buffer;
                                            wrap: word-wrap;
                                            font-size: console_body_font_size;
                                            font-family: console_font_family;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }

                HorizontalLayout {
                    alignment: center;
                    spacing: root.width * 0.1;
                    Button {
                        text: "Power off";
                        width: button_width;
                        height: button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            root.power_off();
                        }
                    }

                    Button {
                        text: "Reboot";
                        width: button_width;
                        height: button_height;
                        border-radius: radius;
                        font-family: header_font_family;
                        clicked => {
                            root.reboot();
                        }
                    }
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }

                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: short_version_string;
                        horizontal-alignment: center;
                        wrap: word-wrap;
                        font-family: console_font_family;
                        font-size: console_body_font_size;
                        width: root.width * 0.85;
                    }
                }

                Rectangle {
                    vertical-stretch: 0.1;
                }
            }
        }
    }

    // Make dialogs modal and make them disappear whenever the user clicks outside of them
    TouchArea {
        width: root.width;
        height: root.height;
        enabled: dialog == DialogType.None ? false : true;
        clicked => {
            TextInputInterface.text-input-focused = false;
            dialog = DialogType.None;
        }
    }

    // Toasts/dialogs
    if (dialog == DialogType.Toast): Rectangle {
        width: 0.5 * scaling_factor * root.width;
        height: 0.07 * scaling_factor * root.height;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border-color: black;
        border-width: dialog_rectangle_thickness;
        border-radius: radius;
        background: white;
        TouchArea {
            width: parent.width;
            height: parent.height;
            enabled: true;
        }

        Text {
            text: root.dialog_message;
            font-family: "Inter";
            font-weight: 800;
        }
    }
    // Generic Confirm/Cancel dialog
    if (dialog != DialogType.None && dialog != DialogType.Toast && dialog != DialogType.WifiUI && dialog != DialogType.WifiLogs && dialog != DialogType.WifiPassphrase): Dialog {
        border-radius: radius;
        width: 0.45 * scaling_factor * root.width;
        height: 0.3 * scaling_factor * root.height;
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        text: root.dialog_message;
        button_font_family: header_font_family;
        cancel => {
            dialog = DialogType.None;
        }
        confirm => {
            if dialog == DialogType.SoftReset {
                soft_reset();
            }
            dialog = DialogType.None;
        }
    }
    // Wi-Fi UI dialog
    if (dialog == DialogType.WifiUI || dialog == DialogType.WifiPassphrase): Rectangle {
        border-width: dialog_rectangle_thickness;
        border-color: black;
        border-radius: radius;
        background: white;
        width: (scaling_factor == 1 && TextInputInterface.text-input-focused) ? 0.55 * scaling_factor * root.width : 0.45 * scaling_factor * root.width;
        height: (scaling_factor > 1 && TextInputInterface.text-input-focused) ? 0.3 * scaling_factor * root.height : scaling_factor > 1 ? 0.4 * scaling_factor * root.height : 0.45 * root.height;
        x: (scaling_factor > 1 || TextInputInterface.text-input-focused) ? (root.width - self.width) / 2 : root.width - self.width - 60px;
        y: (scaling_factor > 1 && !TextInputInterface.text-input-focused) ? (root.height - self.height) / 2 : TextInputInterface.text-input-focused ? root.height - self.height - (keyboard_key_height * 4.15) - 100px : root.height - self.height - 165px;
        TouchArea {
            width: parent.width;
            height: parent.height;
            enabled: true;
        }

        if (dialog == DialogType.WifiUI): VerticalLayout {
            padding: layout_padding;
            HorizontalLayout {
                Text {
                    text: "Wi-Fi";
                    font-family: header_font_family;
                    font-weight: 800;
                    vertical-alignment: center;
                }

                Rectangle { }

                IconButton {
                    icon: @image-url("../../icons/refresh.svg");
                    border-radius: radius;
                    height: button_height * 0.65;
                    width: self.height;
                    y: (parent.height - self.height) / 2;
                    visible: wifi_enabled && !wifi_disabling_lock;
                    enabled: !wifi_scanning_lock && !wifi_connecting_lock;
                    clicked => {
                        get_networks();
                    }
                }

                VLine {
                    left-padding-multiplier: 2.5;
                    right-padding-multiplier: 5.0;
                    visible: wifi_enabled && !wifi_disabling_lock;
                }

                Switch {
                    y: (parent.height - self.height) / 2;
                    width: switch_width;
                    height: switch_height;
                    border-radius: radius;
                    activated: wifi_enabled;
                    enabled: !wifi_enabling_lock && !wifi_disabling_lock;
                    toggled => {
                        toggle_wifi();
                    }
                }
            }

            HLine {
                top-padding-multiplier: 4.0;
                bottom-padding-multiplier: self.top-padding-multiplier;
            }

            if (wifi_enabled && !wifi_scanning_lock && !wifi_connecting_lock && !wifi_enabling_lock && !wifi_disabling_lock): ScrollView {
                mouse-drag-pan-enabled: true;
                VerticalLayout {
                    spacing: layout_spacing;
                    // Wi-Fi button(s)
                    for name[index] in wifi_network_names: i-button := TouchArea {
                        i-container := Rectangle {
                            border-radius: radius;
                            border-width: 3px;
                            border-color: #a5a5a5;
                            background: name == wifi_connected_name ? #dbdada : #ffffff;

                            HorizontalLayout {
                                padding: 20px;
                                spacing: layout_spacing;

                                i-text := Text {
                                    color: #000000;
                                    horizontal-alignment: left;
                                    vertical-alignment: center;
                                    font-family: regular_font_family;
                                    font-size: root.default-font-size * 0.8;
                                    text: name;
                                    wrap: word-wrap;
                                }

                                Rectangle { }

                                VerticalLayout {
                                    alignment: center;
                                    HorizontalLayout {
                                        spacing: layout_spacing;
                                        if (name == wifi_connected_name): Image {
                                            source: @image-url("../../icons/wifi-connected-alt.svg");
                                            height: icon_button_height;
                                            width: self.height;
                                            colorize: i-button.pressed ? #ffffff : #000000;
                                        }
                                        if (wifi_network_open_vec[index]): Image {
                                            source: @image-url("../../icons/wifi-network-open.svg");
                                            height: icon_button_height;
                                            width: self.height;
                                            colorize: i-button.pressed ? #ffffff : #000000;
                                        }
                                        if (!wifi_network_open_vec[index]): Image {
                                            source: @image-url("../../icons/wifi-network-locked.svg");
                                            height: icon_button_height;
                                            width: self.height;
                                            colorize: i-button.pressed ? #ffffff : #000000;
                                        }
                                    }
                                }
                            }
                        }

                        states [
                            pressed when self.pressed: {
                                i-container.background: #000000;
                                i-text.color: #ffffff;
                            }
                        ]

                        clicked => {
                            if wifi_network_open_vec[index] {
                                connect_to_wifi_network(name, "");
                            } else {
                                potential_wifi_network = name;
                                TextInputInterface.text-input-focused = true;
                                dialog = DialogType.WifiPassphrase;
                            }
                        }
                    }
                    Rectangle { }
                }
            }
            if (!wifi_enabled && !wifi_enabling_lock): HorizontalLayout {
                alignment: center;
                Text {
                    text: "Enable Wi-Fi in order to connect to a network";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: root.default-font-size * 0.9;
                    wrap: word-wrap;
                    width: parent.width * 0.75;
                }
            }
            if (wifi_enabling_lock): HorizontalLayout {
                alignment: center;
                Text {
                    text: "Enabling Wi-Fi";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: root.default-font-size * 0.9;
                    wrap: word-wrap;
                    width: parent.width * 0.75;
                }
            }
            if (wifi_disabling_lock): HorizontalLayout {
                alignment: center;
                Text {
                    text: "Disabling Wi-Fi";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: root.default-font-size * 0.9;
                    wrap: word-wrap;
                    width: parent.width * 0.75;
                }
            }
            if (wifi_scanning_lock && !wifi_disabling_lock): HorizontalLayout {
                alignment: center;
                Text {
                    text: "Scanning for networks";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: root.default-font-size * 0.9;
                    wrap: word-wrap;
                    width: parent.width * 0.75;
                }
            }
            if (wifi_connecting_lock && !wifi_disabling_lock): HorizontalLayout {
                alignment: center;
                Text {
                    text: "Connecting to network";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: root.default-font-size * 0.9;
                    wrap: word-wrap;
                    width: parent.width * 0.75;
                }
            }
        }
        if (dialog == DialogType.WifiPassphrase): VerticalLayout {
            padding: layout_padding;
            HorizontalLayout {
                height: switch_height;
                IconButton {
                    icon: @image-url("../../icons/arrow-back.svg");
                    border-radius: radius;
                    height: icon_button_height;
                    width: self.height;
                    y: (parent.height - self.height) / 2;
                    clicked => {
                        TextInputInterface.text-input-focused = false;
                        dialog = DialogType.WifiUI;
                    }
                }
                Text {
                    text: "Enter passphrase";
                    font-family: header_font_family;
                    font-size: root.default-font-size * dialog_sizes_multiplier;
                    font-weight: 800;
                    wrap: word-wrap;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
                Rectangle {
                    height: icon_button_height;
                    width: self.height;
                    y: (parent.height - self.height) / 2;
                }
            }

            HLine {
                top-padding-multiplier: 4.0;
                bottom-padding-multiplier: self.top-padding-multiplier;
            }

            Rectangle {
                height: parent.height * 0.08;
                border-width: 3px;
                border-color: black;
                border-radius: radius;
                passphrase-edit := LineEdit {
                    width: parent.width * 0.99;
                    height: parent.height * 0.925;
                    placeholder-text: "Passphrase for “\{potential_wifi_network}”";
                    font-size: root.default-font-size * dialog_sizes_multiplier;
                    input-type: password;
                }
            }

            Rectangle {
                vertical-stretch: 0.05;
            }

            HorizontalLayout {
                Text {
                    font-family: regular_font_family;
                    text: "Show passphrase";
                    font-size: root.default-font-size * dialog_sizes_multiplier;
                    vertical-alignment: center;
                }
                Rectangle { }
                Switch {
                    y: (parent.height - self.height) / 2;
                    width: switch_width * dialog_sizes_multiplier;
                    height: switch_height * dialog_sizes_multiplier;
                    border-radius: radius;
                    activated: passphrase-edit.input-type == InputType.text ? true : false;
                    toggled => {
                        if (passphrase-edit.input-type == InputType.password) {
                            passphrase-edit.input-type = InputType.text;
                        } else {
                            passphrase-edit.input-type = InputType.password;
                        }
                    }
                }
            }

            Rectangle { }

            Button {
                width: 100%;
                height: button_height * dialog_sizes_multiplier;
                font-family: header_font_family;
                font-size: root.default-font-size * dialog_sizes_multiplier;
                border-radius: radius;
                text: "Connect";
                clicked => {
                    TextInputInterface.text-input-focused = false;
                    dialog = DialogType.WifiUI;
                    connect_to_wifi_network(potential_wifi_network, passphrase-edit.text);
                }
            }
        }
    }

    // Virtual keyboard
    if (TextInputInterface.text-input-focused): VerticalLayout {
        alignment: end;
        VirtualKeyboard {
            font-family: header_font_family;
            radius: radius;
            key-height: keyboard_key_height;
            scaling-factor: scaling_factor;
            close => {
                TextInputInterface.text-input-focused = false;
                if (dialog == DialogType.WifiPassphrase) {
                    dialog = DialogType.WifiUI;
                } else {
                    dialog = DialogType.None;
                }
            }
        }
    }
}
